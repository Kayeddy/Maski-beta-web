// Profile type selection form
{
    "use client";

  // React
  import React, { useState, useCallback } from "react";
  import { useForm, Controller } from "react-hook-form";

  // Stores

  // Components
  import {
    Select,
    SelectItem,
    Card,
    CardHeader,
    CardBody,
    Image,
    Button,
  } from "@nextui-org/react";
  import { MotionOnboardingProfileTypeSelectionFormWrapper } from "@/wrapper/motionWrapper";

  // Next JS
  import dynamic from "next/dynamic";

  // Zod
  import { zodResolver } from "@hookform/resolvers/zod";

  // Validations
  import { ProfileSelectionValidation } from "@/lib/validations/onboarding";

  // Icons
  import { QuestionMarkCircledIcon } from "@radix-ui/react-icons";

  // Constants
  import { userTypeOptions } from "@/constants/onboarding";

  // Clerk
  import { useSession } from "@clerk/nextjs";

  // Zustand stores
  import { useUserOnboardingStore } from "@/store/onboarding/useUserOnboardingStore";
  import { useOnboardingFormStore } from "@/store/onboarding/useOnboardingFormStore";
  import { useUserData } from "@/lib/hooks/useUserData";
  import { useRegisterUser } from "@/lib/hooks/useRegisterUser";
  import { useUpdateUserProfile } from "@/lib/hooks/useUpdateUserProfile";
  import { useCreateUserProfile } from "@/lib/hooks/useCreateUserProfile";

  const CustomDrawer = dynamic(
    () => import("@/components/customUI/CustomDrawer"),
    {
      ssr: false,
    }
  );

  interface FormValues {
    profileType: string;
  }

  /**
  * Renders descriptions for user type options.
  * This is used in the CustomDrawer component to provide additional information to the user.
  * @returns {React.ReactElement} The component with the user type descriptions.
  */
  const userTypeOptionsDescriptions = () => (
    <div className="flex flex-col items-start justify-start lg:justify-around w-full gap-8 p-4 lg:flex-row max-h-[400px] overflow-y-auto py-4 lg:py-0">
      {userTypeOptions.map(({ label, value, description }) => (
        <div key={value} className="flex flex-col gap-4">
          <h2 className="text-heading3-bold">{label}</h2>
          <p className="text-base-regular">{description}</p>
        </div>
      ))}
    </div>
  );

  interface ProfileTypeSelectionOnboardingFormProps {
    onProceed: (formName: string) => void;
  }

  /**
  * `ProfileTypeSelectionOnboardingForm` component handles the user profile type selection
  * during the onboarding process. It allows users to select a profile type and proceed
  * with the onboarding flow.
  *
  * @component
  * @param {ProfileTypeSelectionOnboardingFormProps} props The component props.
  * @param {Function} props.onProceed Callback function to proceed to the next step after form submission.
  * @returns {React.ReactElement} Rendered component.
  */
  const ProfileTypeSelectionOnboardingForm: React.FC<
    ProfileTypeSelectionOnboardingFormProps
  > = ({ onProceed }) => {
    const [isSubmitting, setIsSubmitting] = useState(false);

    const { setUserProfileType, userState: onboardingUserState } =
      useOnboardingFormStore();
    const { setDatabaseUserData, userState } = useUserOnboardingStore();
    const { isLoaded: isUserSessionLoaded, session } = useSession();
    const {
      control,
      handleSubmit,
      formState: { errors },
    } = useForm<FormValues>({
      resolver: zodResolver(ProfileSelectionValidation),
      defaultValues: {
        profileType:
          userState.databaseUserData?.profileData?.type ||
          onboardingUserState.profileType ||
          "",
      },
    });

    const registerUserMutation = useRegisterUser();
    const updateUserProfileMutation = useUpdateUserProfile();
    const createUserProfileMutation = useCreateUserProfile();

    /**
    * Handles the form submission, updating or creating user profile data as necessary.
    * @param {FormValues} data The form data containing the selected profile type.
    */
    // const onSubmit = useCallback(
    //   async (data: FormValues) => {
    //     if (!isUserSessionLoaded || !session) return;
    //     setIsSubmitting(true);
    //     setUserProfileType(data.profileType);
    //     onProceed(data.profileType);
    //     const sessionToken = await session.getToken();

    //     if (
    //       onboardingUserState.profileType === data.profileType ||
    //       userState.databaseUserData?.profileData?.type === data.profileType
    //     ) {
    //       // Existing profile matches the selected type, no need to update
    //       setIsSubmitting(false);
    //       return;
    //     }

    //     if (userState.databaseUserData?.profileData) {
    //       // Update existing profile
    //       const updatedUserProfile = await updateProfile({
    //         userId: userState.databaseUserData.userId,
    //         profileId: userState.databaseUserData.profileData.profileId,
    //         type: data.profileType,
    //         sessionToken,
    //       });

    //       if (updatedUserProfile) {
    //         setDatabaseUserData({
    //           ...userState.databaseUserData,
    //           profileData: updatedUserProfile,
    //         });
    //       }
    //     } else {
    //       // Create new user and profile if not exist
    //       const registeredUser = await registerUser({
    //         data: { email: session.publicUserData.identifier },
    //         sessionToken,
    //       });

    //       const createdProfile = await createProfile({
    //         userId: registeredUser._id,
    //         type: data.profileType,
    //         data: {},
    //         sessionToken,
    //       });

    //       if (createdProfile) {
    //         setDatabaseUserData({
    //           userId: registeredUser._id,
    //           profileData: createdProfile,
    //         });
    //       }
    //     }

    //     setIsSubmitting(false);
    //   },
    //   [
    //     isUserSessionLoaded,
    //     session,
    //     onboardingUserState.profileType,
    //     userState.databaseUserData,
    //     setUserProfileType,
    //     setDatabaseUserData,
    //     onProceed,
    //   ]
    // );

    const onSubmit = useCallback(
      async (data: FormValues) => {
        if (!isUserSessionLoaded || !session) return;
        setIsSubmitting(true);
        const { profileType } = data;
        setUserProfileType(data.profileType);
        setUserProfileType(profileType);

        if (userState.databaseUserData.userId) {
          if (userState.databaseUserData.profileData?.type !== profileType) {
            // Update existing profile
            updateUserProfileMutation.mutate(
              {
                userId: userState.databaseUserData.userId,
                profileId: userState.databaseUserData?.profileData?.profileId,
                type: profileType,
              },
              {
                onSuccess: (updatedProfile) => {
                  setDatabaseUserData({
                    ...userState.databaseUserData,
                    profileData: updatedProfile,
                  });
                  onProceed(profileType);
                },
              }
            );
          } else {
            onProceed(profileType);
          }
        } else {
          // Register new user and create profile
          registerUserMutation.mutate(
            { email: session?.publicUserData.identifier ?? "" },
            {
              onSuccess: (registeredUser) => {
                createUserProfileMutation.mutate(
                  {
                    userId: registeredUser._id,
                    type: data.profileType,
                    data: {},
                  },
                  {
                    onSuccess: (createdProfile) => {
                      setDatabaseUserData({
                        userId: registeredUser._id,
                        profileData: createdProfile,
                      });
                      onProceed(profileType);
                    },
                  }
                );
              },
            }
          );
        }
      },
      [
        setUserProfileType,
        updateUserProfileMutation,
        createUserProfileMutation,
        registerUserMutation,
        userState.databaseUserData,
        setDatabaseUserData,
        session,
        onProceed,
      ]
    );

    return (
      <MotionOnboardingProfileTypeSelectionFormWrapper>
        <div className="flex flex-col w-full">
          <Card className="p-10 sm:p-20 lg:p-24">
            <CardHeader className="flex-col items-center px-4 pt-2 pb-0">
              <small className="text-default-500">Welcome</small>
              <span className="flex flex-row items-center gap-4">
                <h4 className="font-bold text-heading3-bold lg:text-heading2-bold">
                  Pet Lover
                </h4>
                <Image
                  alt="Card background"
                  width={24}
                  height={24}
                  className="max-w-md object-fit max-h-md"
                  src="https://em-content.zobj.net/source/microsoft-teams/363/waving-hand_1f44b.png"
                />
              </span>
            </CardHeader>
            <CardBody className="flex items-center justify-center gap-6 py-2 overflow-visible">
              <section className="flex flex-col items-center gap-4 lg:flex-row">
                <p className="relative max-w-md my-2 text-sm text-center text-default-500">
                  What brings you to Connect2Pet?
                </p>
                <CustomDrawer
                  triggerElement={
                    <div className="flex flex-row items-center gap-1 cursor-pointer hover:scale-105 animate-pulse">
                      <QuestionMarkCircledIcon />
                      <p className="text-base-regular lg:hidden">Info</p>
                    </div>
                  }
                  title="Check it out!"
                  description="Below is a brief explanation to each profile type. Don't worry, you can switch between profiles later!"
                  content={userTypeOptionsDescriptions()}
                />
              </section>
              <section className="w-full">
                <form
                  onSubmit={handleSubmit(onSubmit)}
                  className="flex flex-col items-center justify-center w-full gap-4"
                >
                  <Controller
                    name="profileType"
                    control={control}
                    rules={{ required: true }}
                    render={({ field, fieldState: { error } }) => (
                      <Select
                        {...field}
                        label="Select an option"
                        variant="bordered"
                        className="max-w-xs"
                        isInvalid={error ? true : false}
                        errorMessage={error?.message}
                        selectedKeys={field.value ? [field.value] : []}
                        onChange={(value) => field.onChange(value)}
                      >
                        {userTypeOptions.map((option) => (
                          <SelectItem key={option.value} value={option.value}>
                            {option.label}
                          </SelectItem>
                        ))}
                      </Select>
                    )}
                  />
                  <Button type="submit" isLoading={isSubmitting}>
                    {isSubmitting ? "Loading" : "Continue"}
                  </Button>
                </form>
              </section>
            </CardBody>
          </Card>
        </div>
      </MotionOnboardingProfileTypeSelectionFormWrapper>
    );
  };

  export default ProfileTypeSelectionOnboardingForm;

}